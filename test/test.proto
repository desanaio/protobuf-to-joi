syntax = "proto3";

message Basic {
  double num = 1;
  bytes payload = 2;
}

message Strings {
  string foo = 1;
  string bar = 2;
}

message Map {
  map<string, string> foo = 1;
  map<string, int64> bar = 2;
}

message UTF8 {
  string foo = 1;
  uint32 bar = 2;
}

message Nested {
  double num = 1;
  bytes payload = 2;
  Basic meh = 3;
}

message Repeated {
  repeated Basic list = 1;
}

message Integers {
  optional sint32 sint32 = 1;
  optional sint64 sint64 = 2;
  optional int32 int32 = 3;
  optional uint32 uint32 = 4;
  optional int64 int64 = 5;
}

message Float {
  optional float float1 = 1;
  optional float float2 = 2;
  optional float float3 = 3;
}

message Packed {
  repeated Basic list = 1;
  repeated string packed = 2;
}

message NotPacked {
  repeated int64 id = 2;
  optional int64 value = 5;
}
message FalsePacked {
  repeated int64 id = 2 [packed=false];
  optional int64 value = 5;
}

message EmbeddedNested {
  message Nest {
    string nested_string = 1;
  }
  Nest nest = 1;
}

enum FOO {
  FOO_UNSPECIFIED = 0;
  A = 1;
  B = 2;
}

message Defaults {
  optional int32 num = 1;
  optional FOO foo1 = 2;
  optional FOO foo2 = 3;
  repeated FOO foos = 4;
}

message Property {
  string name = 1;
  optional string desc = 2;

  oneof value {
    bool bool_value = 3;
    float float_value = 4;
    int32 int_value = 5;
    string string_value = 6;
  }
}

message PropertyNoOneof {
  string name = 1;
  optional string desc = 2;

  optional bool bool_value  = 3;
  optional float float_value = 4;
  optional int32 int_value = 5;
  optional string string_value = 6;
}

// `Struct` represents a structured data value, consisting of fields
// which map to dynamically typed values. In some languages, `Struct`
// might be supported by a native representation. For example, in
// scripting languages like JS a struct is represented as an
// object. The details of that representation are described together
// with the proto support for the language.
//
// The JSON representation for `Struct` is JSON object.
message Struct {
  // Unordered map of dynamically typed values.
  map<string, Value> fields = 1;
}

// `Value` represents a dynamically typed value which can be either
// null, a number, a string, a boolean, a recursive struct value, or a
// list of values. A producer of value is expected to set one of that
// variants, absence of any variant indicates an error.
//
// The JSON representation for `Value` is JSON value.
message Value {
  // The kind of value.
  oneof kind {
    // Represents a null value.
    NullValue null_value = 1;
    // Represents a double value.
    double number_value = 2;
    // Represents a string value.
    string string_value = 3;
    // Represents a boolean value.
    bool bool_value = 4;
    // Represents a structured value.
    Struct struct_value = 5;
    // Represents a repeated `Value`.
    ListValue list_value = 6;
  }
}

// `NullValue` is a singleton enumeration to represent the null value for the
// `Value` type union.
//
//  The JSON representation for `NullValue` is JSON `null`.
enum NullValue {
  // Null value.
  NULL_VALUE = 0;
}

// `ListValue` is a wrapper around a repeated field of values.
//
// The JSON representation for `ListValue` is JSON array.
message ListValue {
  // Repeated field of dynamically typed values.
  repeated Value values = 1;
}
